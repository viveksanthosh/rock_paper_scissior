"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ConnectedUser_1 = require("../domains/ConnectedUser");
class ConnectedUsers {
    constructor() {
        this.users = [];
    }
    addUser(userSocket) {
        this.users.push(new ConnectedUser_1.default(userSocket));
        this.emitActiveUsers();
    }
    emitActiveUsers() {
        this.users.forEach(user => user.socket.emit('activeUsers', this.users.length));
    }
    emitOpponentFound(user) {
        user.socket.emit("userFound", { myColor: "purple", opponentColor: "green" });
        user.game.opponentSocket.emit("userFound", { myColor: "green", opponentColor: "purple" });
        console.log('opponentFound');
    }
    listenForOpponentMove(user, opponent) {
        console.log('regestered');
        user.socket.on("move", move => {
            console.log("my move " + move);
            console.log("opponents move " + opponent.game.myMove);
            user.game.myMove = move;
            if (!!opponent.game.myMove) {
                this.evaluateResult(user, opponent);
            }
            else {
                opponent.game.opponentMove = move;
            }
        });
    }
    evaluateResult(user, opponent) {
        console.log("evaluatiing");
        if (user.game.myMove !== "NONE" && user.game.opponentMove === "NONE") {
            this.emitResults(user, { result: "WON", myMove: user.game.myMove, opponentsMove: user.game.opponentMove });
            this.emitResults(opponent, { result: "LOST", myMove: user.game.opponentMove, opponentsMove: user.game.myMove });
        }
        else if (user.game.myMove === "NONE" && user.game.opponentMove !== "NONE") {
            this.emitResults(user, { result: "LOST", myMove: user.game.myMove, opponentsMove: user.game.opponentMove });
            this.emitResults(opponent, { result: "WON", myMove: user.game.opponentMove, opponentsMove: user.game.myMove });
        }
        else if (user.game.myMove === user.game.opponentMove) {
            this.emitResults(user, { result: "tie", myMove: user.game.myMove, opponentsMove: user.game.opponentMove });
            this.emitResults(opponent, { result: "tie", myMove: user.game.opponentMove, opponentsMove: user.game.myMove });
        }
        else if (user.game.myMove === "Rock" && user.game.opponentMove === "Scissor") {
            this.emitResults(user, { result: "WON", myMove: user.game.myMove, opponentsMove: user.game.opponentMove });
            this.emitResults(opponent, { result: "LOST", myMove: user.game.opponentMove, opponentsMove: user.game.myMove });
        }
        else if (user.game.myMove === "Rock" && user.game.opponentMove === "Paper") {
            this.emitResults(user, { result: "LOST", myMove: user.game.myMove, opponentsMove: user.game.opponentMove });
            this.emitResults(opponent, { result: "WON", myMove: user.game.opponentMove, opponentsMove: user.game.myMove });
        }
        else if (user.game.myMove === "Paper" && user.game.opponentMove === "Scissor") {
            this.emitResults(user, { result: "LOST", myMove: user.game.myMove, opponentsMove: user.game.opponentMove });
            this.emitResults(opponent, { result: "WON", myMove: user.game.opponentMove, opponentsMove: user.game.myMove });
        }
        else if (user.game.myMove === "Paper" && user.game.opponentMove === "Rock") {
            this.emitResults(user, { result: "WON", myMove: user.game.myMove, opponentsMove: user.game.opponentMove });
            this.emitResults(opponent, { result: "LOST", myMove: user.game.opponentMove, opponentsMove: user.game.myMove });
        }
        else if (user.game.myMove === "Scissor" && user.game.opponentMove === "Rock") {
            this.emitResults(user, { result: "LOST", myMove: user.game.myMove, opponentsMove: user.game.opponentMove });
            this.emitResults(opponent, { result: "WON", myMove: user.game.opponentMove, opponentsMove: user.game.myMove });
        }
        else if (user.game.myMove === "Scissor" && user.game.opponentMove === "Paper") {
            this.emitResults(user, { result: "WON", myMove: user.game.myMove, opponentsMove: user.game.opponentMove });
            this.emitResults(opponent, { result: "LOST", myMove: user.game.opponentMove, opponentsMove: user.game.myMove });
        }
        else {
            this.emitResults(user, { result: "error", myMove: user.game.myMove, opponentsMove: user.game.opponentMove });
            this.emitResults(opponent, { result: "error", myMove: user.game.opponentMove, opponentsMove: user.game.myMove });
        }
    }
    emitResults(user, result) {
        user.socket.emit('result', result);
    }
    findOpponent(id) {
        console.log('searching for id ' + id);
        let opponent = this.users.find(user => user.id !== id && user.lookingForOpponent), currentUser = this.userById(id);
        currentUser.lookingForOpponent = true;
        if (!!opponent) {
            console.log('found ' + opponent.id);
            currentUser.setOpponent({
                myMove: null,
                opponentMove: null,
                opponentSocket: opponent.socket
            });
            opponent.setOpponent({
                myMove: null,
                opponentMove: null,
                opponentSocket: currentUser.socket
            });
            currentUser.lookingForOpponent = false;
            opponent.lookingForOpponent = false;
            this.emitOpponentFound(currentUser);
            this.listenForOpponentMove(currentUser, opponent);
            this.listenForOpponentMove(opponent, currentUser);
        }
    }
    userById(id) {
        return this.users.find(user => user.id === id);
    }
    removeUserById(id) {
        this.users = this.users.filter(user => user.id !== id);
        this.emitActiveUsers();
    }
    get totalUsers() {
        return this.users.length;
    }
}
let connectedUsers = new ConnectedUsers();
exports.default = connectedUsers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,